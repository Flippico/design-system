{"version":3,"file":"flp-avatar.stories-CFH8dA3I.js","sources":["../src/components/flp-avatar/flp-avatar.styles.ts","../src/components/flp-avatar/flp-avatar.ts"],"sourcesContent":["import { css } from 'lit';\nimport componentStyles from '../../styles/component.styles';\n\nexport const flippico = css`\n  ${componentStyles}\n\n:host {\n  display: inline-block;\n\n  --size: 3rem;\n}\n\n.avatar {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n  width: var(--size);\n  height: var(--size);\n  background-color: var(--flp-color-neutral-400);\n  font-family: var(--flp-font-light);\n  font-size: calc(var(--size) * 0.5);\n  font-weight: var(--flp-font-weight-normal);\n  color: var(--flp-color-neutral-0);\n  user-select: none;\n  -webkit-user-select: none;\n  vertical-align: middle;\n}\n\n.avatar--circle,\n.avatar--circle .avatar__image {\n  border-radius: var(--flp-border-radius-circle);\n}\n\n.avatar--rounded,\n.avatar--rounded .avatar__image {\n  border-radius: var(--flp-border-radius-medium);\n}\n\n.avatar--square {\n  border-radius: 0;\n}\n\n.avatar__icon {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n}\n\n.avatar__initials {\n  line-height: 1;\n  text-transform: uppercase;\n}\n\n.avatar__image {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  overflow: hidden;\n}`;","import { CSSResultGroup, html } from 'lit';\nimport FlpElement from '../../utils/flippico-element';\nimport {customElement, property, state} from 'lit/decorators.js';\n\nimport { flippico } from './flp-avatar.styles';\nimport { watch } from '../../utils/watch';\nimport { classMap } from 'lit/directives/class-map.js';\n\n/**\n * @summary This the flp-avatar component\n *\n * @tag flp-avatar\n */\n @customElement(\"flp-avatar\")\nexport class FlpAvatar extends FlpElement {\n  static styles: CSSResultGroup = [flippico];\n\n  @state() private hasError = false;\n\n  /** The image source to use for the avatar. */\n  @property() image = '';\n\n  /** A label to use to describe the avatar to assistive devices. */\n  @property() label = '';\n\n  /** Initials to use as a fallback when no image is available (1-2 characters max recommended). */\n  @property() initials = '';\n\n  /** Indicates how the browser should load the image. */\n  @property() loading: 'eager' | 'lazy' = 'eager';\n\n  /** The shape of the avatar. */\n  @property({ reflect: true }) shape: 'circle' | 'square' | 'rounded' = 'circle';\n\n  @watch('image')\n  handleImageChange() {\n    // Reset the error when a new image is provided\n    this.hasError = false;\n  }\n\n  render() {\n    const avatarWithImage = html`\n      <img\n        part=\"image\"\n        class=\"avatar__image\"\n        src=\"${this.image}\"\n        loading=\"${this.loading}\"\n        alt=\"\"\n        @error=\"${() => (this.hasError = true)}\"\n      />\n    `;\n\n    let avatarWithoutImage = html``;\n\n    if (this.initials) {\n      avatarWithoutImage = html`<div part=\"initials\" class=\"avatar__initials\">${this.initials}</div>`;\n    } else {\n      avatarWithoutImage = html`\n        <div part=\"icon\" class=\"avatar__icon\" aria-hidden=\"true\">\n          <slot name=\"icon\">\n            <flp-icon name=\"person-fill\" library=\"system\"></flp-icon>\n          </slot>\n        </div>\n      `;\n    }\n\n    return html`\n      <div\n        part=\"base\"\n        class=${classMap({\n          avatar: true,\n          'avatar--circle': this.shape === 'circle',\n          'avatar--rounded': this.shape === 'rounded',\n          'avatar--square': this.shape === 'square'\n        })}\n        role=\"img\"\n        aria-label=${this.label}\n      >\n        ${this.image && !this.hasError ? avatarWithImage : avatarWithoutImage}\n      </div>\n    `;\n  }\n}\n"],"names":["flippico","css","componentStyles","FlpAvatar","FlpElement","avatarWithImage","html","avatarWithoutImage","classMap","__decorateClass","state","property","watch","customElement"],"mappings":"kWAGO,MAAMA,EAAWC;AAAAA,IACpBC,CAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mMCUZ,IAAMC,EAAN,cAAwBC,CAAW,CAAnC,aAAA,CAAA,MAAA,GAAA,SAAA,EAGI,KAAQ,SAAW,GAGhB,KAAA,MAAQ,GAGR,KAAA,MAAQ,GAGR,KAAA,SAAW,GAGX,KAAA,QAA4B,QAGX,KAAA,MAAyC,QAAA,CAGtE,mBAAoB,CAElB,KAAK,SAAW,EAClB,CAEA,QAAS,CACP,MAAMC,EAAkBC;AAAAA;AAAAA;AAAAA;AAAAA,eAIb,KAAK,KAAK;AAAA,mBACN,KAAK,OAAO;AAAA;AAAA,kBAEb,IAAO,KAAK,SAAW,EAAK;AAAA;AAAA,MAI1C,IAAIC,EAAqBD,IAEzB,OAAI,KAAK,SACPC,EAAqBD,kDAAqD,KAAK,QAAQ,SAEvFC,EAAqBD;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,QAShBA;AAAAA;AAAAA;AAAAA,gBAGKE,EAAS,CACf,OAAQ,GACR,iBAAkB,KAAK,QAAU,SACjC,kBAAmB,KAAK,QAAU,UAClC,iBAAkB,KAAK,QAAU,QAAA,CAClC,CAAC;AAAA;AAAA,qBAEW,KAAK,KAAK;AAAA;AAAA,UAErB,KAAK,OAAS,CAAC,KAAK,SAAWH,EAAkBE,CAAkB;AAAA;AAAA,KAG3E,CACF,EApEaJ,EACJ,OAAyB,CAACH,CAAQ,EAExBS,EAAA,CAAhBC,EAAA,CAAM,EAHIP,EAGM,UAAA,WAAA,CAAA,EAGLM,EAAA,CAAXE,EAAA,CAAS,EANCR,EAMC,UAAA,QAAA,CAAA,EAGAM,EAAA,CAAXE,EAAA,CAAS,EATCR,EASC,UAAA,QAAA,CAAA,EAGAM,EAAA,CAAXE,EAAA,CAAS,EAZCR,EAYC,UAAA,WAAA,CAAA,EAGAM,EAAA,CAAXE,EAAA,CAAS,EAfCR,EAeC,UAAA,UAAA,CAAA,EAGiBM,EAAA,CAA5BE,EAAS,CAAE,QAAS,EAAA,CAAM,CAAA,EAlBhBR,EAkBkB,UAAA,QAAA,CAAA,EAG7BM,EAAA,CADCG,EAAM,OAAO,CAAA,EApBHT,EAqBX,UAAA,oBAAA,CAAA,EArBWA,EAANM,EAAA,CADLI,EAAc,YAAY,CAAA,EACfV,CAAA;;;;;;;;;;;;;;;;;;;;;;"}