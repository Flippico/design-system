{"version":3,"file":"flp-switch.stories-utFa1r1W.js","sources":["../src/components/flp-switch/flp-switch.styles.ts","../src/components/flp-switch/flp-switch.ts"],"sourcesContent":["import { css } from 'lit';\nimport componentStyles from '../../styles/component.styles';\n\nexport const flippico = css`\n${componentStyles}\n\n:host {\n  display: inline-block;\n}\n\n:host([size='small']) {\n  --height: var(--flp-toggle-size-small);\n  --thumb-size: calc(var(--flp-toggle-size-small) + 4px);\n  --width: calc(var(--height) * 2);\n\n  font-size: var(--flp-input-font-size-small);\n}\n\n:host([size='medium']) {\n  --height: var(--flp-toggle-size-medium);\n  --thumb-size: calc(var(--flp-toggle-size-medium) + 4px);\n  --width: calc(var(--height) * 2);\n\n  font-size: var(--flp-input-font-size-medium);\n}\n\n:host([size='large']) {\n  --height: var(--flp-toggle-size-large);\n  --thumb-size: calc(var(--flp-toggle-size-large) + 4px);\n  --width: calc(var(--height) * 2);\n\n  font-size: var(--flp-input-font-size-large);\n}\n\n.switch {\n  position: relative;\n  display: inline-flex;\n  align-items: center;\n  font-family: var(--flp-input-font-family);\n  font-size: inherit;\n  font-weight: var(--flp-input-font-weight);\n  color: var(--flp-input-label-color);\n  vertical-align: middle;\n  cursor: pointer;\n}\n\n.switch__control {\n  flex: 0 0 auto;\n  position: relative;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  width: var(--width);\n  height: var(--height);\n  background-color: var(--flp-color-neutral-400);\n  border: solid var(--flp-input-border-width) var(--flp-color-neutral-400);\n  border-radius: var(--height);\n  transition:\n    var(--flp-transition-fast) border-color,\n    var(--flp-transition-fast) background-color;\n}\n\n.switch__control .switch__thumb {\n  width: var(--thumb-size);\n  height: var(--thumb-size);\n  background-color: var(--flp-color-neutral-0);\n  border-radius: 50%;\n  border: solid var(--flp-input-border-width) var(--flp-color-neutral-400);\n  translate: calc((var(--width) - var(--height)) / -2);\n  transition:\n    var(--flp-transition-fast) translate ease,\n    var(--flp-transition-fast) background-color,\n    var(--flp-transition-fast) border-color,\n    var(--flp-transition-fast) box-shadow;\n}\n\n.switch__input {\n  position: absolute;\n  opacity: 0;\n  padding: 0;\n  margin: 0;\n  pointer-events: none;\n}\n\n/* Hover */\n.switch:not(.switch--checked):not(.switch--disabled) .switch__control:hover {\n  background-color: var(--flp-color-neutral-400);\n  border-color: var(--flp-color-neutral-400);\n}\n\n.switch:not(.switch--checked):not(.switch--disabled) .switch__control:hover .switch__thumb {\n  background-color: var(--flp-color-neutral-0);\n  border-color: var(--flp-color-neutral-400);\n}\n\n/* Focus */\n.switch:not(.switch--checked):not(.switch--disabled) .switch__input:focus-visible ~ .switch__control {\n  background-color: var(--flp-color-neutral-400);\n  border-color: var(--flp-color-neutral-400);\n}\n\n.switch:not(.switch--checked):not(.switch--disabled) .switch__input:focus-visible ~ .switch__control .switch__thumb {\n  background-color: var(--flp-color-neutral-0);\n  border-color: var(--flp-color-primary-600);\n  outline: var(--flp-focus-ring);\n  outline-offset: var(--flp-focus-ring-offset);\n}\n\n/* Checked */\n.switch--checked .switch__control {\n  background-color: var(--flp-color-primary-600);\n  border-color: var(--flp-color-primary-600);\n}\n\n.switch--checked .switch__control .switch__thumb {\n  background-color: var(--flp-color-neutral-0);\n  border-color: var(--flp-color-primary-600);\n  translate: calc((var(--width) - var(--height)) / 2);\n}\n\n/* Checked + hover */\n.switch.switch--checked:not(.switch--disabled) .switch__control:hover {\n  background-color: var(--flp-color-primary-600);\n  border-color: var(--flp-color-primary-600);\n}\n\n.switch.switch--checked:not(.switch--disabled) .switch__control:hover .switch__thumb {\n  background-color: var(--flp-color-neutral-0);\n  border-color: var(--flp-color-primary-600);\n}\n\n/* Checked + focus */\n.switch.switch--checked:not(.switch--disabled) .switch__input:focus-visible ~ .switch__control {\n  background-color: var(--flp-color-primary-600);\n  border-color: var(--flp-color-primary-600);\n}\n\n.switch.switch--checked:not(.switch--disabled) .switch__input:focus-visible ~ .switch__control .switch__thumb {\n  background-color: var(--flp-color-neutral-0);\n  border-color: var(--flp-color-primary-600);\n  outline: var(--flp-focus-ring);\n  outline-offset: var(--flp-focus-ring-offset);\n}\n\n/* Disabled */\n.switch--disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n\n.switch__label {\n  display: inline-block;\n  line-height: var(--height);\n  margin-inline-start: 0.5em;\n  user-select: none;\n  -webkit-user-select: none;\n}\n\n:host([required]) .switch__label::after {\n  content: var(--flp-input-required-content);\n  margin-inline-start: var(--flp-input-required-content-offset);\n}\n\n@media (forced-colors: active) {\n  .switch.switch--checked:not(.switch--disabled) .switch__control:hover .switch__thumb,\n  .switch--checked .switch__control .switch__thumb {\n    background-color: ButtonText;\n  }\n}\n`;","import { CSSResultGroup, html } from 'lit';\nimport FlpElement, { FlpFormControl } from '../../utils/flippico-element';\nimport {customElement, property, query, state} from 'lit/decorators.js';\n\nimport { flippico } from './flp-switch.styles';\nimport { FormControlController } from '../../utils/form';\nimport { defaultValue } from '../../utils/default-value';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { live } from 'lit/directives/live.js';\nimport { watch } from '../../utils/watch';\n\n/**\n * @summary This the flp-switch component\n *\n * @tag flp-switch\n */\n @customElement(\"flp-switch\")\nexport class FlpSwitch extends FlpElement implements FlpFormControl {\n  static styles: CSSResultGroup = [flippico];\n\n  private readonly formControlController = new FormControlController(this, {\n    value: (control: any) => (control.checked ? control.value || 'on' : undefined),\n    defaultValue: (control: any) => control.defaultChecked,\n    setValue: (control: any, checked: any) => (control.checked = checked)\n  });\n\n  @query('input[type=\"checkbox\"]') input: HTMLInputElement;\n\n  @state() private hasFocus = false;\n  @property() title = ''; // make reactive to pass through\n\n  /** The name of the switch, submitted as a name/value pair with form data. */\n  @property() name = '';\n\n  /** The current value of the switch, submitted as a name/value pair with form data. */\n  @property() value: string;\n\n  /** The switch's size. */\n  @property({ reflect: true }) size: 'small' | 'medium' | 'large' = 'medium';\n\n  /** Disables the switch. */\n  @property({ type: Boolean, reflect: true }) disabled = false;\n\n  /** Draws the switch in a checked state. */\n  @property({ type: Boolean, reflect: true }) checked = false;\n\n  /** The default value of the form control. Primarily used for resetting the form control. */\n  @defaultValue('checked') defaultChecked = false;\n\n  /**\n   * By default, form controls are associated with the nearest containing `<form>` element. This attribute allows you\n   * to place the form control outside of a form and associate it with the form that has this `id`. The form must be in\n   * the same document or shadow root for this to work.\n   */\n  @property({ reflect: true }) form = '';\n\n  /** Makes the switch a required field. */\n  @property({ type: Boolean, reflect: true }) required = false;\n\n  /** Gets the validity state object */\n  get validity() {\n    return this.input.validity;\n  }\n\n  /** Gets the validation message */\n  get validationMessage() {\n    return this.input.validationMessage;\n  }\n\n  firstUpdated() {\n    this.formControlController.updateValidity();\n  }\n\n  private handleBlur() {\n    this.hasFocus = false;\n    this.emit('flp-blur');\n  }\n\n  private handleInput() {\n    this.emit('flp-input');\n  }\n\n  private handleInvalid(event: Event) {\n    this.formControlController.setValidity(false);\n    this.formControlController.emitInvalidEvent(event);\n  }\n\n  private handleClick() {\n    this.checked = !this.checked;\n    this.emit('flp-change');\n  }\n\n  private handleFocus() {\n    this.hasFocus = true;\n    this.emit('flp-focus');\n  }\n\n  private handleKeyDown(event: KeyboardEvent) {\n    if (event.key === 'ArrowLeft') {\n      event.preventDefault();\n      this.checked = false;\n      this.emit('flp-change');\n      this.emit('flp-input');\n    }\n\n    if (event.key === 'ArrowRight') {\n      event.preventDefault();\n      this.checked = true;\n      this.emit('flp-change');\n      this.emit('flp-input');\n    }\n  }\n\n  @watch('checked', { waitUntilFirstUpdate: true })\n  handleCheckedChange() {\n    this.input.checked = this.checked; // force a sync update\n    this.formControlController.updateValidity();\n  }\n\n  @watch('disabled', { waitUntilFirstUpdate: true })\n  handleDisabledChange() {\n    // Disabled form controls are always valid\n    this.formControlController.setValidity(true);\n  }\n\n  /** Simulates a click on the switch. */\n  click() {\n    this.input.click();\n  }\n\n  /** Sets focus on the switch. */\n  focus(options?: FocusOptions) {\n    this.input.focus(options);\n  }\n\n  /** Removes focus from the switch. */\n  blur() {\n    this.input.blur();\n  }\n\n  /** Checks for validity but does not show a validation message. Returns `true` when valid and `false` when invalid. */\n  checkValidity() {\n    return this.input.checkValidity();\n  }\n\n  /** Gets the associated form, if one exists. */\n  getForm(): HTMLFormElement | null {\n    return this.formControlController.getForm();\n  }\n\n  /** Checks for validity and shows the browser's validation message if the control is invalid. */\n  reportValidity() {\n    return this.input.reportValidity();\n  }\n\n  /** Sets a custom validation message. Pass an empty string to restore validity. */\n  setCustomValidity(message: string) {\n    this.input.setCustomValidity(message);\n    this.formControlController.updateValidity();\n  }\n\n  render() {\n    return html`\n      <label\n        part=\"base\"\n        class=${classMap({\n          switch: true,\n          'switch--checked': this.checked,\n          'switch--disabled': this.disabled,\n          'switch--focused': this.hasFocus,\n          'switch--small': this.size === 'small',\n          'switch--medium': this.size === 'medium',\n          'switch--large': this.size === 'large'\n        })}\n      >\n        <input\n          class=\"switch__input\"\n          type=\"checkbox\"\n          title=${this.title /* An empty title prevents browser validation tooltips from appearing on hover */}\n          name=${this.name}\n          value=${ifDefined(this.value)}\n          .checked=${live(this.checked)}\n          .disabled=${this.disabled}\n          .required=${this.required}\n          role=\"switch\"\n          aria-checked=${this.checked ? 'true' : 'false'}\n          @click=${this.handleClick}\n          @input=${this.handleInput}\n          @invalid=${this.handleInvalid}\n          @blur=${this.handleBlur}\n          @focus=${this.handleFocus}\n          @keydown=${this.handleKeyDown}\n        />\n\n        <span part=\"control\" class=\"switch__control\">\n          <span part=\"thumb\" class=\"switch__thumb\"></span>\n        </span>\n\n        <div part=\"label\" class=\"switch__label\">\n          <slot></slot>\n        </div>\n      </label>\n    `;\n  }\n}\n"],"names":["flippico","css","componentStyles","FlpSwitch","FlpElement","FormControlController","control","checked","event","options","message","html","classMap","ifDefined","live","__decorateClass","query","state","property","defaultValue","watch","customElement"],"mappings":"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"}