{"version":3,"file":"scroll-Xz6hnXoZ.js","sources":["../src/utils/offset.ts","../src/utils/scroll.ts"],"sourcesContent":["/**\n * Returns an element's offset relative to its parent. Similar to element.offsetTop and element.offsetLeft, except the\n * parent doesn't have to be positioned relative or absolute.\n *\n * NOTE: This was created to work around what appears to be a bug in Chrome where a slotted element's offsetParent seems\n * to ignore elements inside the surrounding shadow DOM: https://bugs.chromium.org/p/chromium/issues/detail?id=920069\n */\nexport function getOffset(element: HTMLElement, parent: HTMLElement) {\n  return {\n    top: Math.round(element.getBoundingClientRect().top - parent.getBoundingClientRect().top),\n    left: Math.round(element.getBoundingClientRect().left - parent.getBoundingClientRect().left)\n  };\n}\n","import { getOffset } from './offset.js';\n\nconst locks = new Set();\n\n/** Returns the width of the document's scrollbar */\nfunction getScrollbarWidth() {\n  const documentWidth = document.documentElement.clientWidth;\n  return Math.abs(window.innerWidth - documentWidth);\n}\n\n/**\n * Prevents body scrolling. Keeps track of which elements requested a lock so multiple levels of locking are possible\n * without premature unlocking.\n */\nexport function lockBodyScrolling(lockingEl: HTMLElement) {\n  locks.add(lockingEl);\n\n  // When the first lock is created, set the scroll lock size to match the scrollbar's width to prevent content from\n  // shifting. We only do this on the first lock because the scrollbar width will measure zero after overflow is hidden.\n  if (!document.body.classList.contains('flp-scroll-lock')) {\n    const scrollbarWidth = getScrollbarWidth(); // must be measured before the `flp-scroll-lock` class is applied\n    document.body.classList.add('flp-scroll-lock');\n    document.body.style.setProperty('--flp-scroll-lock-size', `${scrollbarWidth}px`);\n  }\n}\n\n/**\n * Unlocks body scrolling. Scrolling will only be unlocked once all elements that requested a lock call this method.\n */\nexport function unlockBodyScrolling(lockingEl: HTMLElement) {\n  locks.delete(lockingEl);\n\n  if (locks.size === 0) {\n    document.body.classList.remove('flp-scroll-lock');\n    document.body.style.removeProperty('--flp-scroll-lock-size');\n  }\n}\n\n/** Scrolls an element into view of its container. If the element is already in view, nothing will happen. */\nexport function scrollIntoView(\n  element: HTMLElement,\n  container: HTMLElement,\n  direction: 'horizontal' | 'vertical' | 'both' = 'vertical',\n  behavior: 'smooth' | 'auto' = 'smooth'\n) {\n  const offset = getOffset(element, container);\n  const offsetTop = offset.top + container.scrollTop;\n  const offsetLeft = offset.left + container.scrollLeft;\n  const minX = container.scrollLeft;\n  const maxX = container.scrollLeft + container.offsetWidth;\n  const minY = container.scrollTop;\n  const maxY = container.scrollTop + container.offsetHeight;\n\n  if (direction === 'horizontal' || direction === 'both') {\n    if (offsetLeft < minX) {\n      container.scrollTo({ left: offsetLeft, behavior });\n    } else if (offsetLeft + element.clientWidth > maxX) {\n      container.scrollTo({ left: offsetLeft - container.offsetWidth + element.clientWidth, behavior });\n    }\n  }\n\n  if (direction === 'vertical' || direction === 'both') {\n    if (offsetTop < minY) {\n      container.scrollTo({ top: offsetTop, behavior });\n    } else if (offsetTop + element.clientHeight > maxY) {\n      container.scrollTo({ top: offsetTop - container.offsetHeight + element.clientHeight, behavior });\n    }\n  }\n}\n"],"names":["getOffset","element","parent","locks","getScrollbarWidth","documentWidth","lockBodyScrolling","lockingEl","scrollbarWidth","unlockBodyScrolling","scrollIntoView","container","direction","behavior","offset","offsetTop","offsetLeft","minX","maxX","minY","maxY"],"mappings":"AAOO,SAASA,EAAUC,EAAsBC,EAAqB,CACnE,MAAO,CACL,IAAK,KAAK,MAAMD,EAAQ,wBAAwB,IAAMC,EAAO,sBAAA,EAAwB,GAAG,EACxF,KAAM,KAAK,MAAMD,EAAQ,sBAAA,EAAwB,KAAOC,EAAO,sBAAA,EAAwB,IAAI,CAAA,CAE/F,CCVA,MAAMC,MAAY,IAGlB,SAASC,GAAoB,CAC3B,MAAMC,EAAgB,SAAS,gBAAgB,YAC/C,OAAO,KAAK,IAAI,OAAO,WAAaA,CAAa,CACnD,CAMO,SAASC,EAAkBC,EAAwB,CAKxD,GAJAJ,EAAM,IAAII,CAAS,EAIf,CAAC,SAAS,KAAK,UAAU,SAAS,iBAAiB,EAAG,CACxD,MAAMC,EAAiBJ,EAAA,EACvB,SAAS,KAAK,UAAU,IAAI,iBAAiB,EAC7C,SAAS,KAAK,MAAM,YAAY,yBAA0B,GAAGI,CAAc,IAAI,CACjF,CACF,CAKO,SAASC,EAAoBF,EAAwB,CAC1DJ,EAAM,OAAOI,CAAS,EAElBJ,EAAM,OAAS,IACjB,SAAS,KAAK,UAAU,OAAO,iBAAiB,EAChD,SAAS,KAAK,MAAM,eAAe,wBAAwB,EAE/D,CAGO,SAASO,EACdT,EACAU,EACAC,EAAgD,WAChDC,EAA8B,SAC9B,CACA,MAAMC,EAASd,EAAUC,EAASU,CAAS,EACrCI,EAAYD,EAAO,IAAMH,EAAU,UACnCK,EAAaF,EAAO,KAAOH,EAAU,WACrCM,EAAON,EAAU,WACjBO,EAAOP,EAAU,WAAaA,EAAU,YACxCQ,EAAOR,EAAU,UACjBS,EAAOT,EAAU,UAAYA,EAAU,cAEzCC,IAAc,cAAgBA,IAAc,UAC1CI,EAAaC,EACfN,EAAU,SAAS,CAAE,KAAMK,EAAY,SAAAH,EAAU,EACxCG,EAAaf,EAAQ,YAAciB,GAC5CP,EAAU,SAAS,CAAE,KAAMK,EAAaL,EAAU,YAAcV,EAAQ,YAAa,SAAAY,EAAU,IAI/FD,IAAc,YAAcA,IAAc,UACxCG,EAAYI,EACdR,EAAU,SAAS,CAAE,IAAKI,EAAW,SAAAF,EAAU,EACtCE,EAAYd,EAAQ,aAAemB,GAC5CT,EAAU,SAAS,CAAE,IAAKI,EAAYJ,EAAU,aAAeV,EAAQ,aAAc,SAAAY,EAAU,EAGrG"}