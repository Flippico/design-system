{"version":3,"file":"flp-input-DnWocktz.js","sources":["../src/components/flp-input/flp-input.styles.ts","../src/components/flp-input/flp-input.ts"],"sourcesContent":["import { css } from 'lit';\nimport componentStyles from '../../styles/component.styles';\nimport formControlStyles from '../../styles/form-control.styles';\n\nexport const flippico = css`\n  ${componentStyles}\n  ${formControlStyles}\n\n  :host {\n    display: block;\n  }\n\n  .input {\n    flex: 1 1 auto;\n    display: inline-flex;\n    align-items: stretch;\n    justify-content: start;\n    position: relative;\n    width: 100%;\n    font-family: var(--flp-input-font-family);\n    font-weight: var(--flp-input-font-weight);\n    letter-spacing: var(--flp-input-letter-spacing);\n    vertical-align: middle;\n    overflow: hidden;\n    cursor: text;\n    transition:\n      var(--flp-transition-fast) color,\n      var(--flp-transition-fast) border,\n      var(--flp-transition-fast) box-shadow,\n      var(--flp-transition-fast) background-color;\n  }\n\n  /* Standard inputs */\n  .input--standard {\n    background-color: var(--flp-input-background-color);\n    border: solid var(--flp-input-border-width) var(--flp-input-border-color);\n  }\n\n  .input--standard:hover:not(.input--disabled) {\n    background-color: var(--flp-input-background-color-hover);\n    border-color: var(--flp-input-border-color-hover);\n  }\n\n  .input--standard.input--focused:not(.input--disabled) {\n    background-color: var(--flp-input-background-color-focus);\n    border-color: var(--flp-input-border-color-focus);\n    box-shadow: 0 0 0 var(--flp-focus-ring-width) var(--flp-input-focus-ring-color);\n  }\n\n  .input--standard.input--focused:not(.input--disabled) .input__control {\n    color: var(--flp-input-color-focus);\n  }\n\n  .input--standard.input--disabled {\n    background-color: var(--flp-input-background-color-disabled);\n    border-color: var(--flp-input-border-color-disabled);\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n\n  .input--standard.input--disabled .input__control {\n    color: var(--flp-input-color-disabled);\n  }\n\n  .input--standard.input--disabled .input__control::placeholder {\n    color: var(--flp-input-placeholder-color-disabled);\n  }\n\n  /* Filled inputs */\n  .input--filled {\n    border: none;\n    background-color: var(--flp-input-filled-background-color);\n    color: var(--flp-input-color);\n  }\n\n  .input--filled:hover:not(.input--disabled) {\n    background-color: var(--flp-input-filled-background-color-hover);\n  }\n\n  .input--filled.input--focused:not(.input--disabled) {\n    background-color: var(--flp-input-filled-background-color-focus);\n    outline: var(--flp-focus-ring);\n    outline-offset: var(--flp-focus-ring-offset);\n  }\n\n  .input--filled.input--disabled {\n    background-color: var(--flp-input-filled-background-color-disabled);\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n\n  .input__control {\n    flex: 1 1 auto;\n    font-family: inherit;\n    font-size: inherit;\n    font-weight: inherit;\n    min-width: 0;\n    height: 100%;\n    color: var(--flp-input-color);\n    border: none;\n    background: inherit;\n    box-shadow: none;\n    padding: 0;\n    margin: 0;\n    cursor: inherit;\n    -webkit-appearance: none;\n  }\n\n  .input__control::-webkit-search-decoration,\n  .input__control::-webkit-search-cancel-button,\n  .input__control::-webkit-search-results-button,\n  .input__control::-webkit-search-results-decoration {\n    -webkit-appearance: none;\n  }\n\n  .input__control:-webkit-autofill,\n  .input__control:-webkit-autofill:hover,\n  .input__control:-webkit-autofill:focus,\n  .input__control:-webkit-autofill:active {\n    box-shadow: 0 0 0 var(--flp-input-height-large) var(--flp-input-background-color-hover) inset !important;\n    -webkit-text-fill-color: var(--flp-color-primary-500);\n    caret-color: var(--flp-input-color);\n  }\n\n  .input--filled .input__control:-webkit-autofill,\n  .input--filled .input__control:-webkit-autofill:hover,\n  .input--filled .input__control:-webkit-autofill:focus,\n  .input--filled .input__control:-webkit-autofill:active {\n    box-shadow: 0 0 0 var(--flp-input-height-large) var(--flp-input-filled-background-color) inset !important;\n  }\n\n  .input__control::placeholder {\n    color: var(--flp-input-placeholder-color);\n    user-select: none;\n    -webkit-user-select: none;\n  }\n\n  .input:hover:not(.input--disabled) .input__control {\n    color: var(--flp-input-color-hover);\n  }\n\n  .input__control:focus {\n    outline: none;\n  }\n\n  .input__prefix,\n  .input__suffix {\n    display: inline-flex;\n    flex: 0 0 auto;\n    align-items: center;\n    cursor: default;\n  }\n\n  .input__prefix ::slotted(sl-icon),\n  .input__suffix ::slotted(sl-icon) {\n    color: var(--flp-input-icon-color);\n  }\n\n  /*\n   * Size modifiers\n   */\n\n  .input--small {\n    border-radius: var(--flp-input-border-radius-small);\n    font-size: var(--flp-input-font-size-small);\n    height: var(--flp-input-height-small);\n  }\n\n  .input--small .input__control {\n    height: calc(var(--flp-input-height-small) - var(--flp-input-border-width) * 2);\n    padding: 0 var(--flp-input-spacing-small);\n  }\n\n  .input--small .input__clear,\n  .input--small .input__password-toggle {\n    width: calc(1em + var(--flp-input-spacing-small) * 2);\n  }\n\n  .input--small .input__prefix ::slotted(*) {\n    margin-inline-start: var(--flp-input-spacing-small);\n  }\n\n  .input--small .input__suffix ::slotted(*) {\n    margin-inline-end: var(--flp-input-spacing-small);\n  }\n\n  .input--medium {\n    border-radius: var(--flp-input-border-radius-medium);\n    font-size: var(--flp-input-font-size-medium);\n    height: var(--flp-input-height-medium);\n  }\n\n  .input--medium .input__control {\n    height: calc(var(--flp-input-height-medium) - var(--flp-input-border-width) * 2);\n    padding: 0 var(--flp-input-spacing-medium);\n  }\n\n  .input--medium .input__clear,\n  .input--medium .input__password-toggle {\n    width: calc(1em + var(--flp-input-spacing-medium) * 2);\n  }\n\n  .input--medium .input__prefix ::slotted(*) {\n    margin-inline-start: var(--flp-input-spacing-medium);\n  }\n\n  .input--medium .input__suffix ::slotted(*) {\n    margin-inline-end: var(--flp-input-spacing-medium);\n  }\n\n  .input--large {\n    border-radius: var(--flp-input-border-radius-large);\n    font-size: var(--flp-input-font-size-large);\n    height: var(--flp-input-height-large);\n  }\n\n  .input--large .input__control {\n    height: calc(var(--flp-input-height-large) - var(--flp-input-border-width) * 2);\n    padding: 0 var(--flp-input-spacing-large);\n  }\n\n  .input--large .input__clear,\n  .input--large .input__password-toggle {\n    width: calc(1em + var(--flp-input-spacing-large) * 2);\n  }\n\n  .input--large .input__prefix ::slotted(*) {\n    margin-inline-start: var(--flp-input-spacing-large);\n  }\n\n  .input--large .input__suffix ::slotted(*) {\n    margin-inline-end: var(--flp-input-spacing-large);\n  }\n\n  /*\n   * Pill modifier\n   */\n\n  .input--pill.input--small {\n    border-radius: var(--flp-input-height-small);\n  }\n\n  .input--pill.input--medium {\n    border-radius: var(--flp-input-height-medium);\n  }\n\n  .input--pill.input--large {\n    border-radius: var(--flp-input-height-large);\n  }\n\n  /*\n   * Clearable + Password Toggle\n   */\n\n  .input__clear:not(.input__clear--visible) {\n    visibility: hidden;\n  }\n\n  .input__clear,\n  .input__password-toggle {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    font-size: inherit;\n    color: var(--flp-input-icon-color);\n    border: none;\n    background: none;\n    padding: 0;\n    transition: var(--flp-transition-fast) color;\n    cursor: pointer;\n  }\n\n  .input__clear:hover,\n  .input__password-toggle:hover {\n    color: var(--flp-input-icon-color-hover);\n  }\n\n  .input__clear:focus,\n  .input__password-toggle:focus {\n    outline: none;\n  }\n\n  .input--empty .input__clear {\n    visibility: hidden;\n  }\n\n  /* Don't show the browser's password toggle in Edge */\n  ::-ms-reveal {\n    display: none;\n  }\n\n  /* Hide the built-in number spinner */\n  .input--no-spin-buttons input[type='number']::-webkit-outer-spin-button,\n  .input--no-spin-buttons input[type='number']::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    display: none;\n  }\n\n  .input--no-spin-buttons input[type='number'] {\n    -moz-appearance: textfield;\n  }\n`;","import { CSSResultGroup, html } from 'lit';\nimport FlpElement from '../../utils/flippico-element';\nimport {customElement, property, query, state} from 'lit/decorators.js';\n\nimport { flippico } from './flp-input.styles';\nimport { FormControlController } from '../../utils/form.js';\nimport { HasSlotController } from '../../utils/slot.js';\nimport { watch } from '../../utils/watch.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { live } from 'lit/directives/live.js';\nimport { defaultValue } from '../../utils/default-value.js';\n\n/**\n * @summary This the flp-input component\n *\n * @tag flp-input\n */\n @customElement(\"flp-input\")\nexport class FlpInput extends FlpElement {\n  static styles: CSSResultGroup = [flippico];\n\n  private readonly formControlController = new FormControlController(this, {\n    assumeInteractionOn: ['flp-blur', 'flp-input']\n  });\n  private readonly hasSlotController = new HasSlotController(this, 'help-text', 'label');\n\n  @query('.input__control') input: HTMLInputElement;\n\n  @state() private hasFocus = false;\n  @property() title = ''; // make reactive to pass through\n\n  private __numberInput = Object.assign(document.createElement('input'), { type: 'number' });\n  private __dateInput = Object.assign(document.createElement('input'), { type: 'date' });\n\n  /**\n   * The type of input. Works the same as a native `<input>` element, but only a subset of types are supported. Defaults\n   * to `text`.\n   */\n  @property({ reflect: true }) type:\n    | 'date'\n    | 'datetime-local'\n    | 'email'\n    | 'number'\n    | 'password'\n    | 'search'\n    | 'tel'\n    | 'text'\n    | 'time'\n    | 'url' = 'text';\n\n  /** The name of the input, submitted as a name/value pair with form data. */\n  @property() name = '';\n\n  /** The current value of the input, submitted as a name/value pair with form data. */\n  @property() value = '';\n\n  /** The default value of the form control. Primarily used for resetting the form control. */\n  @defaultValue() defaultValue = '';\n\n  /** The input's size. */\n  @property({ reflect: true }) size: 'small' | 'medium' | 'large' = 'medium';\n\n  /** Draws a filled input. */\n  @property({ type: Boolean, reflect: true }) filled = false;\n\n  /** Draws a pill-style input with rounded edges. */\n  @property({ type: Boolean, reflect: true }) pill = false;\n\n  /** The input's label. If you need to display HTML, use the `label` slot instead. */\n  @property() label = '';\n\n  /** The input's help text. If you need to display HTML, use the `help-text` slot instead. */\n  @property({ attribute: 'help-text' }) helpText = '';\n\n  /** Adds a clear button when the input is not empty. */\n  @property({ type: Boolean }) clearable = false;\n\n  /** Disables the input. */\n  @property({ type: Boolean, reflect: true }) disabled = false;\n\n  /** Placeholder text to show as a hint when the input is empty. */\n  @property() placeholder = '';\n\n  /** Makes the input readonly. */\n  @property({ type: Boolean, reflect: true }) readonly = false;\n\n  /** Adds a button to toggle the password's visibility. Only applies to password types. */\n  @property({ attribute: 'password-toggle', type: Boolean }) passwordToggle = false;\n\n  /** Determines whether or not the password is currently visible. Only applies to password input types. */\n  @property({ attribute: 'password-visible', type: Boolean }) passwordVisible = false;\n\n  /** Hides the browser's built-in increment/decrement spin buttons for number inputs. */\n  @property({ attribute: 'no-spin-buttons', type: Boolean }) noSpinButtons = false;\n\n  /**\n   * By default, form controls are associated with the nearest containing `<form>` element. This attribute allows you\n   * to place the form control outside of a form and associate it with the form that has this `id`. The form must be in\n   * the same document or shadow root for this to work.\n   */\n  @property({ reflect: true }) form = '';\n\n  /** Makes the input a required field. */\n  @property({ type: Boolean, reflect: true }) required = false;\n\n  /** A regular expression pattern to validate input against. */\n  @property() pattern: string;\n\n  /** The minimum length of input that will be considered valid. */\n  @property({ type: Number }) minlength: number;\n\n  /** The maximum length of input that will be considered valid. */\n  @property({ type: Number }) maxlength: number;\n\n  /** The input's minimum value. Only applies to date and number input types. */\n  @property() min: number | string;\n\n  /** The input's maximum value. Only applies to date and number input types. */\n  @property() max: number | string;\n\n  /**\n   * Specifies the granularity that the value must adhere to, or the special value `any` which means no stepping is\n   * implied, allowing any numeric value. Only applies to date and number input types.\n   */\n  @property() step: number | 'any';\n\n  /** Controls whether and how text input is automatically capitalized as it is entered by the user. */\n  @property() autocapitalize: 'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters';\n\n  /** Indicates whether the browser's autocorrect feature is on or off. */\n  @property() autocorrect: 'off' | 'on';\n\n  /**\n   * Specifies what permission the browser has to provide assistance in filling out form field values. Refer to\n   * [this page on MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) for available values.\n   */\n  @property() autocomplete: string;\n\n  /** Indicates that the input should receive focus on page load. */\n  @property({ type: Boolean }) autofocus: boolean;\n\n  /** Used to customize the label or icon of the Enter key on virtual keyboards. */\n  @property() enterkeyhint: 'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send';\n\n  /** Enables spell checking on the input. */\n  @property({\n    type: Boolean,\n    converter: {\n      // Allow \"true|false\" attribute values but keep the property boolean\n      fromAttribute: value => (!value || value === 'false' ? false : true),\n      toAttribute: value => (value ? 'true' : 'false')\n    }\n  })\n  spellcheck = true;\n\n  /**\n   * Tells the browser what type of data will be entered by the user, allowing it to display the appropriate virtual\n   * keyboard on supportive devices.\n   */\n  @property() inputmode: 'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url';\n\n  //\n  // NOTE: We use an in-memory input for these getters/setters instead of the one in the template because the properties\n  // can be set before the component is rendered.\n  //\n\n  /**\n   * Gets or sets the current value as a `Date` object. Returns `null` if the value can't be converted. This will use the native `<input type=\"{{type}}\">` implementation and may result in an error.\n   */\n  get valueAsDate() {\n    this.__dateInput.type = this.type;\n    this.__dateInput.value = this.value;\n    return this.input?.valueAsDate || this.__dateInput.valueAsDate;\n  }\n\n  set valueAsDate(newValue: Date | null) {\n    this.__dateInput.type = this.type;\n    this.__dateInput.valueAsDate = newValue;\n    this.value = this.__dateInput.value;\n  }\n\n  /** Gets or sets the current value as a number. Returns `NaN` if the value can't be converted. */\n  get valueAsNumber() {\n    this.__numberInput.value = this.value;\n    return this.input?.valueAsNumber || this.__numberInput.valueAsNumber;\n  }\n\n  set valueAsNumber(newValue: number) {\n    this.__numberInput.valueAsNumber = newValue;\n    this.value = this.__numberInput.value;\n  }\n\n  /** Gets the validity state object */\n  get validity() {\n    return this.input.validity;\n  }\n\n  /** Gets the validation message */\n  get validationMessage() {\n    return this.input.validationMessage;\n  }\n\n  firstUpdated() {\n    this.formControlController.updateValidity();\n  }\n\n  private handleBlur() {\n    this.hasFocus = false;\n    this.emit('flp-blur');\n  }\n\n  private handleChange() {\n    this.value = this.input.value;\n    this.emit('flp-change');\n  }\n\n  private handleClearClick(event: MouseEvent) {\n    this.value = '';\n    this.emit('flp-clear');\n    this.emit('flp-input');\n    this.emit('flp-change');\n    this.input.focus();\n\n    event.stopPropagation();\n  }\n\n  private handleFocus() {\n    this.hasFocus = true;\n    this.emit('flp-focus');\n  }\n\n  private handleInput() {\n    this.value = this.input.value;\n    this.formControlController.updateValidity();\n    this.emit('flp-input');\n  }\n\n  private handleInvalid(event: Event) {\n    this.formControlController.setValidity(false);\n    this.formControlController.emitInvalidEvent(event);\n  }\n\n  private handleKeyDown(event: KeyboardEvent) {\n    const hasModifier = event.metaKey || event.ctrlKey || event.shiftKey || event.altKey;\n\n    // Pressing enter when focused on an input should submit the form like a native input, but we wait a tick before\n    // submitting to allow users to cancel the keydown event if they need to\n    if (event.key === 'Enter' && !hasModifier) {\n      setTimeout(() => {\n        //\n        // When using an Input Method Editor (IME), pressing enter will cause the form to submit unexpectedly. One way\n        // to check for this is to look at event.isComposing, which will be true when the IME is open.\n        //\n        // See https://github.com/shoelace-style/shoelace/pull/988\n        //\n        if (!event.defaultPrevented && !event.isComposing) {\n          this.formControlController.submit();\n        }\n      });\n    }\n  }\n\n  private handlePasswordToggle() {\n    this.passwordVisible = !this.passwordVisible;\n  }\n\n  @watch('disabled', { waitUntilFirstUpdate: true })\n  handleDisabledChange() {\n    // Disabled form controls are always valid\n    this.formControlController.setValidity(this.disabled);\n  }\n\n  @watch('step', { waitUntilFirstUpdate: true })\n  handleStepChange() {\n    // If step changes, the value may become invalid so we need to recheck after the update. We set the new step\n    // imperatively so we don't have to wait for the next render to report the updated validity.\n    this.input.step = String(this.step);\n    this.formControlController.updateValidity();\n  }\n\n  @watch('value', { waitUntilFirstUpdate: true })\n  async handleValueChange() {\n    await this.updateComplete;\n    this.formControlController.updateValidity();\n  }\n\n  /** Sets focus on the input. */\n  focus(options?: FocusOptions) {\n    this.input.focus(options);\n  }\n\n  /** Removes focus from the input. */\n  blur() {\n    this.input.blur();\n  }\n\n  /** Selects all the text in the input. */\n  select() {\n    this.input.select();\n  }\n\n  /** Sets the start and end positions of the text selection (0-based). */\n  setSelectionRange(\n    selectionStart: number,\n    selectionEnd: number,\n    selectionDirection: 'forward' | 'backward' | 'none' = 'none'\n  ) {\n    this.input.setSelectionRange(selectionStart, selectionEnd, selectionDirection);\n  }\n\n  /** Replaces a range of text with a new string. */\n  setRangeText(\n    replacement: string,\n    start?: number,\n    end?: number,\n    selectMode: 'select' | 'start' | 'end' | 'preserve' = 'preserve'\n  ) {\n    const selectionStart = start ?? this.input.selectionStart!;\n    const selectionEnd = end ?? this.input.selectionEnd!;\n\n    this.input.setRangeText(replacement, selectionStart, selectionEnd, selectMode);\n\n    if (this.value !== this.input.value) {\n      this.value = this.input.value;\n    }\n  }\n\n  /** Displays the browser picker for an input element (only works if the browser supports it for the input type). */\n  showPicker() {\n    if ('showPicker' in HTMLInputElement.prototype) {\n      this.input.showPicker();\n    }\n  }\n\n  /** Increments the value of a numeric input type by the value of the step attribute. */\n  stepUp() {\n    this.input.stepUp();\n    if (this.value !== this.input.value) {\n      this.value = this.input.value;\n    }\n  }\n\n  /** Decrements the value of a numeric input type by the value of the step attribute. */\n  stepDown() {\n    this.input.stepDown();\n    if (this.value !== this.input.value) {\n      this.value = this.input.value;\n    }\n  }\n\n  /** Checks for validity but does not show a validation message. Returns `true` when valid and `false` when invalid. */\n  checkValidity() {\n    return this.input.checkValidity();\n  }\n\n  /** Gets the associated form, if one exists. */\n  getForm(): HTMLFormElement | null {\n    return this.formControlController.getForm();\n  }\n\n  /** Checks for validity and shows the browser's validation message if the control is invalid. */\n  reportValidity() {\n    return this.input.reportValidity();\n  }\n\n  /** Sets a custom validation message. Pass an empty string to restore validity. */\n  setCustomValidity(message: string) {\n    this.input.setCustomValidity(message);\n    this.formControlController.updateValidity();\n  }\n\n  render() {\n    const hasLabelSlot = this.hasSlotController.test('label');\n    const hasHelpTextSlot = this.hasSlotController.test('help-text');\n    const hasLabel = this.label ? true : !!hasLabelSlot;\n    const hasHelpText = this.helpText ? true : !!hasHelpTextSlot;\n    const hasClearIcon = this.clearable && !this.disabled && !this.readonly;\n    const isClearIconVisible = hasClearIcon && (typeof this.value === 'number' || this.value.length > 0);\n\n    return html`\n      <div\n        part=\"form-control\"\n        class=${classMap({\n          'form-control': true,\n          'form-control--small': this.size === 'small',\n          'form-control--medium': this.size === 'medium',\n          'form-control--large': this.size === 'large',\n          'form-control--has-label': hasLabel,\n          'form-control--has-help-text': hasHelpText\n        })}\n      >\n        <label\n          part=\"form-control-label\"\n          class=\"form-control__label\"\n          for=\"input\"\n          aria-hidden=${hasLabel ? 'false' : 'true'}\n        >\n          <slot name=\"label\">${this.label}</slot>\n        </label>\n\n        <div part=\"form-control-input\" class=\"form-control-input\">\n          <div\n            part=\"base\"\n            class=${classMap({\n              input: true,\n\n              // Sizes\n              'input--small': this.size === 'small',\n              'input--medium': this.size === 'medium',\n              'input--large': this.size === 'large',\n\n              // States\n              'input--pill': this.pill,\n              'input--standard': !this.filled,\n              'input--filled': this.filled,\n              'input--disabled': this.disabled,\n              'input--focused': this.hasFocus,\n              'input--empty': !this.value,\n              'input--no-spin-buttons': this.noSpinButtons\n            })}\n          >\n            <span part=\"prefix\" class=\"input__prefix\">\n              <slot name=\"prefix\"></slot>\n            </span>\n\n            <input\n              part=\"input\"\n              id=\"input\"\n              class=\"input__control\"\n              type=${this.type === 'password' && this.passwordVisible ? 'text' : this.type}\n              title=${this.title /* An empty title prevents browser validation tooltips from appearing on hover */}\n              name=${ifDefined(this.name)}\n              ?disabled=${this.disabled}\n              ?readonly=${this.readonly}\n              ?required=${this.required}\n              placeholder=${ifDefined(this.placeholder)}\n              minlength=${ifDefined(this.minlength)}\n              maxlength=${ifDefined(this.maxlength)}\n              min=${ifDefined(this.min)}\n              max=${ifDefined(this.max)}\n              step=${ifDefined(this.step as number)}\n              .value=${live(this.value)}\n              autocapitalize=${ifDefined(this.autocapitalize)}\n              autocorrect=${ifDefined(this.autocorrect)}\n              ?autofocus=${this.autofocus}\n              spellcheck=${this.spellcheck}\n              pattern=${ifDefined(this.pattern)}\n              enterkeyhint=${ifDefined(this.enterkeyhint)}\n              inputmode=${ifDefined(this.inputmode)}\n              aria-describedby=\"help-text\"\n              @change=${this.handleChange}\n              @input=${this.handleInput}\n              @invalid=${this.handleInvalid}\n              @keydown=${this.handleKeyDown}\n              @focus=${this.handleFocus}\n              @blur=${this.handleBlur}\n            />\n\n            ${hasClearIcon\n              ? html`\n                  <button\n                    part=\"clear-button\"\n                    class=${classMap({\n                      input__clear: true,\n                      'input__clear--visible': isClearIconVisible\n                    })}\n                    type=\"button\"\n                    aria-label=\"clearEntry\"\n                    @click=${this.handleClearClick}\n                    tabindex=\"-1\"\n                  >\n                    <slot name=\"clear-icon\">\n                      <flp-icon name=\"x-circle-fill\" library=\"system\"></flp-icon>\n                    </slot>\n                  </button>\n                `\n              : ''}\n            ${this.passwordToggle && !this.disabled\n              ? html`\n                  <button\n                    part=\"password-toggle-button\"\n                    class=\"input__password-toggle\"\n                    type=\"button\"\n                    aria-label=${this.passwordVisible ? 'hidePassword' : 'showPassword'}\n                    @click=${this.handlePasswordToggle}\n                    tabindex=\"-1\"\n                  >\n                    ${this.passwordVisible\n                      ? html`\n                          <slot name=\"show-password-icon\">\n                            <flp-icon name=\"eye-slash\" library=\"system\"></flp-icon>\n                          </slot>\n                        `\n                      : html`\n                          <slot name=\"hide-password-icon\">\n                            <flp-icon name=\"eye\" library=\"system\"></flp-icon>\n                          </slot>\n                        `}\n                  </button>\n                `\n              : ''}\n\n            <span part=\"suffix\" class=\"input__suffix\">\n              <slot name=\"suffix\"></slot>\n            </span>\n          </div>\n        </div>\n\n        <div\n          part=\"form-control-help-text\"\n          id=\"help-text\"\n          class=\"form-control__help-text\"\n          aria-hidden=${hasHelpText ? 'false' : 'true'}\n        >\n          <slot name=\"help-text\">${this.helpText}</slot>\n        </div>\n      </div>\n    `;\n  }\n}\n"],"names":["flippico","css","componentStyles","formControlStyles","FlpInput","FlpElement","FormControlController","HasSlotController","_a","newValue","event","hasModifier","options","selectionStart","selectionEnd","selectionDirection","replacement","start","end","selectMode","message","hasLabelSlot","hasHelpTextSlot","hasLabel","hasHelpText","hasClearIcon","isClearIconVisible","html","classMap","ifDefined","live","__decorateClass","query","state","property","defaultValue","value","watch","customElement"],"mappings":"unBAIO,MAAMA,EAAWC;AAAAA,IACpBC,CAAe;AAAA,IACfC,CAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;A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"}